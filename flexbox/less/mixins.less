//
//  STACK OVERFLOW
//  Mixins
//
//  -----------------------------------------------------------------------------
//  $   Clearfix
//  -----------------------------------------------------------------------------
.clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after { clear: both; }
}

//  -----------------------------------------------------------------------------
//  $   TRIANGLES
//  -----------------------------------------------------------------------------
.triangle-top(@width, @height, @color) {
    width: 0;
    height: 0;
    border-left: @width solid transparent;
    border-right: @width solid transparent;
    border-bottom: @height solid @color;
}

.triangle-bottom(@width, @height, @color) {
    width: 0;
    height: 0;
    border-left: @width solid transparent;
    border-right: @width solid transparent;
    border-top: @height solid @color;
}

.triangle-right(@width, @height, @color) {
    width: 0;
    height: 0;
    border-top: @width solid transparent;
    border-bottom: @width solid transparent;
    border-left: @height solid @color;
}

.triangle-left(@width, @height, @color) {
    width: 0;
    height: 0;
    border-top: @width solid transparent;
    border-bottom: @width solid transparent;
    border-right: @height solid @color;
}

//  -----------------------------------------------------------------------------
//  $   Text
//  -----------------------------------------------------------------------------
.ellipsisAtWidth(@width) {
    width: @width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.ellipsisAtMaxWidth(@width) {
    max-width: @width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//  Used for loading custom web fonts.
//  Note that you must provide the full font-file path in the mixin.
//  All modern browsers support .woff file format now.
.font-face(@family, @path, @weight, @style) {
@font-face {
    font-family: @family;
    font-weight: @weight;
    font-style: @style;
    src: local(@family), @path format('woff');
}
}


//  -----------------------------------------------------------------------------
//  $   LOOP
//  -----------------------------------------------------------------------------

// For
.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// For each
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}


//  -----------------------------------------------------------------------------
//  $   MISC
//  -----------------------------------------------------------------------------
.backgroundSvgOrPng(@file) {
    background-image: url("img/@{file}.png");
    background-image: url("img/@{file}.svg"), none;
}

.backgroundSvg(@file) {
    background-image: url("img/@{file}.svg");
}

.vertical-gradient(@top, @bottom, no-internet-explorer) {
    background-color: @top/2 + @bottom/2;
    background: -webkit-gradient(linear, left top, left bottom, from(@top), to(@bottom));
    background: -moz-linear-gradient(top, @top, @bottom);
	background: -o-linear-gradient(top, @top, @bottom);
    background: linear-gradient(top, @top, @bottom);
}

.vertical-gradient(@top, @bottom) {
    .vertical-gradient(@top, @bottom, no-internet-explorer);
    filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{top}', endColorstr='@{bottom}')";
}

// @middle-position is a percentage
.vertical-gradient-three-step(@top-color, @middle-color, @bottom-color, @middle-position) {
    background-color: @top-color/2 + @bottom-color/2;
	background: -moz-linear-gradient(top, @top-color 0%, @middle-color @middle-position, @bottom-color 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@top-color), color-stop(@middle-position,@middle-color), color-stop(100%,@bottom-color));
    background: -o-linear-gradient(top, @top-color 0%, @middle-color @middle-position, @bottom-color 100%);
    background: linear-gradient(top, @top-color 0%, @middle-color @middle-position, @bottom-color 100%);
    filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{top-color}', endColorstr='@{bottom-color}')"; // no color steps possible
}


//  ===========================================================================
//  --  APPEARANCE
//      Use this to overwrite the default appearance properties
//  ---------------------------------------------------------------------------
.appearance(@all) {
    -webkit-appearance: @all;
       -moz-appearance: @all;
            appearance: @all;
}

//  ===========================================================================
//  --  BACKFACE VISIBILITY
//  ---------------------------------------------------------------------------
.backface-visibility(@all) {
    -webkit-backface-visibility: @all;
            backface-visibility: @all;
}



//  ===========================================================================
//  $   FLEXBOX
//      Oh boy. Here be dragons! These are mixins for complete flexbox support.
//      Use these mixins instead of writing out flexbox code in your CSS to
//      make sure we're as completely backward compatiable as possible.
//
//      These mixins support only the current browser versions plus the previous
//      version. Older browsers (e.g. IE10, IE9) are not supported. If you need
//      to provide this level of support, consult the following documents:
//
//      Flexbugs: A community-curated list of flexbox issues (mainly IE)
//      https://github.com/philipwalton/flexbugs
//
//      A Guide to Flexbox -- CSS-Tricks.com
//      https://css-tricks.com/snippets/css/a-guide-to-flexbox/
//
//      Flexplorer -- A free Flexbox generator
//      http://bennettfeely.com/flexplorer/
//
//  ===========================================================================
//  --  FLEXBOX CONTAINER
//      Use this on the wrapping parent container on items you want to flex.
//  ---------------------------------------------------------------------------
.flexbox() {
    display: -webkit-flex;
    display: flex;
}

//  --  FLEX VALUES
//      If not set, the default is "1 0 auto". This is shorthand for flex-grow,
//      flex-shrink, and flex-basis combined. The second and third parameters
//      are optional. Per Chris Coyier on CSS-Tricks.com, it is recommended
//      that the shorthand is used over individual properties.
//
//      Note that in IE10, the default value is "0 0 auto".
//  ---------------------------------------------------------------------------
.flex(@values: 1 0 auto) {
    -webkit-flex: @values;
            flex: @values;
}

//  --  FLEX ORDER
//      By default items are laid out per their source order. The order property
//      can be used to change the order in which they appear in the container.
//  ---------------------------------------------------------------------------
.flex-order(@values) {
    -webkit-order: @values;
            order: @values;
}

//  --  JUSTIFY CONTENT
//      The default value for this is "flex-start". This property allows you
//      to change how child items within a parent are positioned.
//  ---------------------------------------------------------------------------
.flex-justify(@values) {
    -webkit-justify-content: @values;
            justify-content: @values;
}

//  --  FLEX FLOW
//      This is another shorthand property for flex-direction and flex-wrap.
//      Default value is "row nowrap".
//  ---------------------------------------------------------------------------
.flex-flow(@values: row nowrap) {
    -webkit-flex-flow: @values;
            flex-flow: @values;
}


//  --  ALIGN ITEMS
//  ---------------------------------------------------------------------------
.align-items(@values: stretch) {
    -webkit-align-items: @values;
            align-items: @values;
}
