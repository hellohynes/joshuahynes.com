//
//  STACKS
//
//  GRID: Flexbox
//
//  TABLE OF CONTENTS
//  • VARIABLES
//  • ROW & COLUMNS
//  • VARIANTS & ADJUSTMENTS
//
//  ============================================================================
//  $   VARIABLES
//  ----------------------------------------------------------------------------
@grid-cols: 16;


//  ============================================================================
//  $   MIXINS
//  ----------------------------------------------------------------------------
//  --  Generate column sizes
//  ----------------------------------------------------------------------------
.grid-columns(@num, @count: 1) when (@count =< @num) {
    > .-cell-@{count} {
        .flex(0 0 auto);
        flex-basis: (@count * 100% / @num);
        max-width: (@count * 100% / @num);
    }

    .grid-columns(@num, (@count + 1));
}

//  --  Generate gutter spacing
//  ----------------------------------------------------------------------------
//  This mixin helps us generate correct flex-basis and max-width values for
//  fixed column sizes.
//  ----------------------------------------------------------------------------
.grid-column-spacing(@spacing, @num: @grid-cols, @count: 1) when (@count =< @num) {
    @cell-width: @count * 100% / @num;

    > .-cell-@{count} {
        flex-basis: calc(~"@{cell-width} - @{spacing}");
        max-width: calc(~"@{cell-width} - @{spacing}");
    }
    .grid-column-spacing(@spacing, @num, (@count + 1));
}

//  Create all out of gutters
//  ----------------------------------------------------------------------------
.grid-spacing(@spacing) {
    margin: -(@spacing);

    //  Generic fluid cell
    > .-cell {
        margin: @spacing;
    }
    //  Fixed width cells
    .grid-column-spacing(@spacing);
}


//  ============================================================================
//  $   GRID: BASE ELEMENTS
//  ----------------------------------------------------------------------------
//      To help simplify our CSS, we create a generic box container. By default
//      this is a row container, but we can modify the box to a column.
.g-box {
    //  By default now, all flexbox grids will use border-box box-sizing
    &,
    *,
    *:after,
    *:before {
        box-sizing: border-box;
    }

    .flexbox();
    .flex();
    .flex-flow();
    position: relative;

    //  Create a generic auto-width col
    > .-cell {
        .flex(1 0 auto);
        position: relative;
        max-width: 100%;
    }

    //  Now create fixed width cols
    .grid-columns(@grid-cols);
}

//  ============================================================================
//  $   GRID: SPACING
//      Insert spaces or gutters in between grid cells
//  ----------------------------------------------------------------------------
.g-box {
    &._sp-2  { .grid-spacing(@su-2); }     //  2px
    &._sp-4  { .grid-spacing(@su-4); }     //  4px
    &._sp-8  { .grid-spacing(@su-8); }     //  8px
    &._sp-12 { .grid-spacing(@su-12); }    //  12px
    &._sp-16 { .grid-spacing(@su-16); }    //  16px
    &._sp-24 { .grid-spacing(@su-24); }    //  24px
    &._sp-32 { .grid-spacing(@su-32); }    //  32px
}


//  ============================================================================
//  $   VARIANTS & ADJUSTMENTS
//      Sometimes you need to adjust how a row or column acts
//  ----------------------------------------------------------------------------
.g-box {
    //  --  Wrap Directions
    //      For changing the wrapping direction of a row or column
    //  ------------------------------------------------------------------------
    &._reversed         { flex-direction: row-reverse;}
    &._col              { .flex-flow(column nowrap); }
    &._col._reversed    { flex-direction: column-reverse;}
    &._wrap             { flex-wrap: wrap; }
    &._wrap-none        { flex-wrap: nowrap; }

    //  --  Alignments
    //      For positioning items within a row or column
    //  ------------------------------------------------------------------------
    &._jc-start         { .justify-content(flex-start); }
    &._jc-center        { .justify-content(center); }
    &._jc-end           { .justify-content(flex-end); }
    &._jc-sp-around     { .justify-content(space-around); }
    &._jc-sp-between    { .justify-content(space-between); }
    &._ai-start         { .align-items(flex-start); }
    &._ai-center        { .align-items(center); }
    &._ai-end           { .align-items(flex-end); }

    //  $$  CELLS
    //      Items which apply only to child cells, not rows or columns
    //  ========================================================================
    > .-cell {
        //  --  Widths
        //  --------------------------------------------------------------------
        &._fl-none       { .flex(0 auto); }

        //  --  Ordering
        //      For reordering cells
        //  --------------------------------------------------------------------
        &._first         { .flex-order(-1); }
        &._last          { .flex-order(1); }
    }
}


//  ============================================================================
//  $   CSS GRID
//      This is supported by all modern browsers except IE11 and Edge.
//      IE11 and Edge support the old spec prefixed. Microsoft is working
//      on shipping the new spec soon. Dated Jun 2017
//
//      Official Status:
//      https://developer.microsoft.com/en-us/microsoft-edge/platform/status/gridupdate/
//  ============================================================================
//      Fall forward. If a browser supports CSS Grids, then use the following
//      CSS. Otherwise they'll ignore it and we can use flexbox instead. This
//      mainly means IE11 and Edge won't be supported for Grids.
//  ----------------------------------------------------------------------------
@supports (grid-auto-rows: 1px) {
    .g-container {
        display: grid;
        grid-template-columns: minmax(@mainbar-width, 1fr) @sidebar-width;
        grid-template-areas: "main sidebar";
        grid-gap: @su-32;

        margin: 0 auto;
        padding: 1.5vmin;
        height: 100%;
        //max-width: @site-width + 100px;

        //  Specific class names that assign template areas
        .g-main {
            grid-column: main;
        }
        .g-sidebar {
            grid-column: sidebar;
        }

        //  Generic grid item. We need to make the inner portion use flexbox
        > .-item {
            .flexbox();
            .flex-flow(column nowrap);
            .flex-justify(flex-start);
        }

        //  --  Grid layouts
        //      Let's create some different layouts
        //  --------------------------------------------------------------------
        //  --  Reversed layout
        //      When we want to flip the default layout, putting the sidebar
        //      on the left, instead of the right. The Profile settings
        //      section is an example of this.
        &._reversed {
            grid-template-columns: @sidebar-width 1fr;
            grid-template-areas: "sidebar main"
        }

        //  --  Gutters
        //      Change the spacing in-between our grid items
        &._gutter-2 {
            grid-gap: @su-2;
        }
        &._gutter-4 {
            grid-gap: @su-4;
        }
        &._gutter-8 {
            grid-gap: @su-8;
        }
        &._gutter-12 {
            grid-gap: @su-12;
        }
        &._gutter-16 {
            grid-gap: @su-16;
        }
        &._gutter-24 {
            grid-gap: @su-24;
        }
        &._gutter-32 {
            grid-gap: @su-32;
        }
        &._gutter-48 {
            grid-gap: @su-48;
        }
    }
}
